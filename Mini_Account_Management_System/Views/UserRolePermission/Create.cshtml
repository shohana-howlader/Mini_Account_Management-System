@{
    ViewData["Title"] = "Create User Role Permission";
}

<!-- Toastr CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />
<!-- Toastr JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

<div class="container-fluid mt-4">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card permission-table">
                <div class="card-header">
                    <h4 class="mb-0">
                        <i class="fas fa-plus-circle me-2"></i>
                        Create New User Role Permission
                    </h4>
                </div>
                <div class="card-body">
                    <!-- User and Role Selection -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <label class="form-label">
                                <i class="fas fa-user me-2"></i>User
                            </label>
                            <select id="userSelect" class="form-select">
                                <option value="">Select User</option>
                                @if (ViewBag.Users != null)
                                {
                                    @foreach (var user in ViewBag.Users)
                                    {
                                        <option value="@user.Id">@user.UserName</option>
                                    }
                                }
                            </select>
                            <small class="text-muted">Selecting a user will clear role selection</small>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">
                                <i class="fas fa-users-cog me-2"></i>Role
                            </label>
                            <select id="roleSelect" class="form-select">
                                <option value="">Select Role</option>
                                @if (ViewBag.Roles != null)
                                {
                                    @foreach (var role in ViewBag.Roles)
                                    {
                                        <option value="@role.Id">@role.RoleName</option>
                                    }
                                }
                            </select>
                            <small class="text-muted">Selecting a role will clear user selection</small>
                        </div>
                    </div>

                    <!-- Selection Info -->
                    <div id="selectionInfo" class="alert alert-info" style="display: none;">
                        <i class="fas fa-info-circle me-2"></i>
                        <span id="selectionText"></span>
                    </div>

                    <!-- Permissions Table -->
                    <div id="permissionsSection">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="mb-0">Screen Permissions</h5>
                            <div>
                                <button type="button" class="btn btn-outline-primary btn-sm me-2" onclick="selectAllPermissions()">
                                    <i class="fas fa-check-square me-1"></i>Select All
                                </button>
                                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="clearAllPermissions()">
                                    <i class="fas fa-times-circle me-1"></i>Clear All
                                </button>
                            </div>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-hover table-bordered">
                                <thead>
                                    <tr>
                                        <th style="width: 80px;">SL</th>
                                        <th>Screen Name</th>
                                        <th style="width: 100px;" class="text-center">
                                            <input type="checkbox" id="readAll" class="form-check-input"> Read
                                        </th>
                                        <th style="width: 100px;" class="text-center">
                                            <input type="checkbox" id="writeAll" class="form-check-input"> Write
                                        </th>
                                        <th style="width: 100px;" class="text-center">
                                            <input type="checkbox" id="editAll" class="form-check-input"> Edit
                                        </th>
                                        <th style="width: 100px;" class="text-center">
                                            <input type="checkbox" id="deleteAll" class="form-check-input"> Delete
                                        </th>
                                    </tr>
                                </thead>
                                <tbody id="permissionsTableBody">
                                    @if (ViewBag.Screens != null)
                                    {
                                        int index = 1;
                                        foreach (var screen in ViewBag.Screens)
                                        {
                                            <tr data-screen-id="@screen.Id">
                                                <td>@index</td>
                                                <td><strong>@screen.ScreenName</strong></td>
                                                <td class="text-center checkbox-container">
                                                    <input type="checkbox" class="form-check-input permission-check" data-permission="read">
                                                </td>
                                                <td class="text-center checkbox-container">
                                                    <input type="checkbox" class="form-check-input permission-check" data-permission="write">
                                                </td>
                                                <td class="text-center checkbox-container">
                                                    <input type="checkbox" class="form-check-input permission-check" data-permission="edit">
                                                </td>
                                                <td class="text-center checkbox-container">
                                                    <input type="checkbox" class="form-check-input permission-check" data-permission="delete">
                                                </td>
                                            </tr>
                                            index++;
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <button type="button" class="btn btn-primary" onclick="savePermissions()">
                                <i class="fas fa-save me-2"></i>
                                Save Permissions
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@Html.AntiForgeryToken()

<script>
    document.addEventListener('DOMContentLoaded', () => {
        document.getElementById('userSelect').addEventListener('change', function () {
            if (this.value) {
                document.getElementById('roleSelect').value = '';
                updateSelectionInfo('user', this.options[this.selectedIndex].text);
            }
        });
        document.getElementById('roleSelect').addEventListener('change', function () {
            if (this.value) {
                document.getElementById('userSelect').value = '';
                updateSelectionInfo('role', this.options[this.selectedIndex].text);
            }
        });

        ['read', 'write', 'edit', 'delete'].forEach(type => {
            document.getElementById(`${type}All`).addEventListener('change', function () {
                document.querySelectorAll(`[data-permission="${type}"]`).forEach(cb => cb.checked = this.checked);
            });
        });
    });

    function updateSelectionInfo(type, name) {
        const info = document.getElementById('selectionInfo');
        const text = document.getElementById('selectionText');
        text.textContent = `Setting permissions for ${type}: ${name}`;
        info.style.display = 'block';
    }

    function selectAllPermissions() {
        document.querySelectorAll('.permission-check').forEach(cb => cb.checked = true);
        ['readAll', 'writeAll', 'editAll', 'deleteAll'].forEach(id => document.getElementById(id).checked = true);
    }

    function clearAllPermissions() {
        document.querySelectorAll('.permission-check').forEach(cb => cb.checked = false);
        ['readAll', 'writeAll', 'editAll', 'deleteAll'].forEach(id => document.getElementById(id).checked = false);
    }

    async function savePermissions() {
        const userId = document.getElementById('userSelect').value || null;
        const roleId = document.getElementById('roleSelect').value || null;

        if (!userId && !roleId) return toastr.warning('Please select either a user or role');

        const permissions = Array.from(document.querySelectorAll('#permissionsTableBody tr[data-screen-id]')).map(row => ({
            screenId: parseInt(row.dataset.screenId),
            canRead: row.querySelector('[data-permission="read"]').checked,
            canWrite: row.querySelector('[data-permission="write"]').checked,
            canEdit: row.querySelector('[data-permission="edit"]').checked,
            canDelete: row.querySelector('[data-permission="delete"]').checked
        }));

        if (permissions.length === 0) return toastr.warning('No permissions found to save');

        try {
            const response = await fetch('@Url.Action("SavePermissions", "UserRolePermission")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ userId: userId ? parseInt(userId) : null, roleId: roleId ? parseInt(roleId) : null, permissions })
            });

            const result = await response.json();
            if (response.ok) toastr.success('Permissions saved successfully');
            else toastr.error(result.message || 'Error saving permissions');
        } catch (error) {
            toastr.error('Error saving permissions: ' + error.message);
        }
    }
</script>
